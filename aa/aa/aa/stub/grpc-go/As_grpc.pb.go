// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stubs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AsClient is the client API for As service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
}

type asClient struct {
	cc grpc.ClientConnInterface
}

func NewAsClient(cc grpc.ClientConnInterface) AsClient {
	return &asClient{cc}
}

func (c *asClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/aa.aa.As/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsServer is the server API for As service.
// All implementations must embed UnimplementedAsServer
// for forward compatibility
type AsServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	mustEmbedUnimplementedAsServer()
}

// UnimplementedAsServer must be embedded to have forward compatible implementations.
type UnimplementedAsServer struct {
}

func (UnimplementedAsServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedAsServer) mustEmbedUnimplementedAsServer() {}

// UnsafeAsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsServer will
// result in compilation errors.
type UnsafeAsServer interface {
	mustEmbedUnimplementedAsServer()
}

func RegisterAsServer(s grpc.ServiceRegistrar, srv AsServer) {
	s.RegisterService(&As_ServiceDesc, srv)
}

func _As_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aa.aa.As/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// As_ServiceDesc is the grpc.ServiceDesc for As service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var As_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aa.aa.As",
	HandlerType: (*AsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _As_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "As.proto",
}
